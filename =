{lib, config, pkgs, inputs, user, ...}:
let
  cfg = config.modules.virtualisation;
in {
  options.modules.virtualisation = {
    enable = lib.mkEnableOption "virtualisation";
  };

  config = lib.mkIf cfg.enable {
    virtualisation.libvirtd = {
      enable = true;

      qemu = {
        package = pkgs.qemu_kvm;
        runAsRoot = true;
        swtpm.enable = true;

        ovmf = {
          enable = true;
          packages = with pkgs; [OVMFFull.fd];
        };
      };
    };

    environment.etc = {
      "libvirt/hooks/qemu".source = "${inputs.vfio-hooks}/libvirt_hooks/qemu";

      # This is needed to make systemd-vmspawn work
      "qemu/firmware".source = "${pkgs.qemu}/share/qemu/firmware";
    };

    systemd.services."systemd-vmspawn@" = {
      description = ["Virtual Machine %i"];
      documentation = "man:systemd-vmspawn(1)";
      partOf = ["machines.target"];
      before = ["machines.target"];
      after = ["network.target" "modprobe@tun.service"];
      unitConfig.RequiresMountsFor = "/var/lib/machines/%i";

      serviceConfig = {
        ExecStart = lib.escapeShellArgs [
          "${pkgs.systemd}/bin/systemd-vmspawn"
          "--quiet"
          "--network-tap"
          "--machine=%i"
        ];
        KillMode = "mixed";
        Type = "notify";
        Slice = "machine.slice";

        DevicePolicy = "closed";
        DeviceAllow = [
          "/dev/net/tun rwm"
          "char-pts rw"
          "/dev/kvm rw"
          "/dev/vhost-vsock rw"
        ];
      };

      wantedBy = ["machines.target"];
    };

    programs.virt-manager.enable = true;

    # Allow outbound connections from VMs to things like 8000, 8080,
    # 9090 or 8443. These are normally temporary web servers or the like.
    networking.firewall.interfaces."virbr0".allowedTCPPortRanges = [
      { from = 8000; to = 10000; }
    ];
  };
}
